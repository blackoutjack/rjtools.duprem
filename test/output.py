#
# Test the command-line output generated by duprem.
#

import os

from duprem.duplicates import find_duplicates, display_duplicates, display_failures, clear

TEST_DIR = os.path.dirname(__file__)

files_basic = [
        os.path.join(TEST_DIR, "filetree", "empty1.txt"),
        os.path.join(TEST_DIR, "filetree", "empty2.txt"),
    ]

def test_basic():
    clear()
    foundDups = find_duplicates(files_basic)
    display_duplicates()
    return foundDups

out_basic = """Duplicate content:
0: %TESTDIR%/filetree/empty1.txt
1: %TESTDIR%/filetree/empty2.txt"""

files_no_dups = [
        os.path.join(TEST_DIR, "filetree", "empty1.txt"),
        os.path.join(TEST_DIR, "filetree", "basic.txt"),
    ]

def test_no_dups():
    clear()
    foundDups = find_duplicates(files_no_dups)
    display_duplicates()
    return not foundDups

out_no_dups = ""


files_jpeg_different_header = [
        os.path.join(TEST_DIR, "filetree", "pic1.jpg"),
        os.path.join(TEST_DIR, "filetree", "pic2.jpg"),
    ]

def test_jpeg_dup():
    clear()
    foundDups = find_duplicates(files_jpeg_different_header)
    display_duplicates()
    return foundDups

out_jpeg_dup = """Duplicate image content:
0: %TESTDIR%/filetree/pic1.jpg
1: %TESTDIR%/filetree/pic2.jpg"""


files_jpeg_different_image = [
        os.path.join(TEST_DIR, "filetree", "pic1.jpg"),
        os.path.join(TEST_DIR, "filetree", "pic3.jpg"),
    ]

def test_jpeg_diff():
    clear()
    foundDups = find_duplicates(files_jpeg_different_image)
    display_duplicates()
    return not foundDups

out_jpeg_diff = ""


files_jpeg_extension = [
        os.path.join(TEST_DIR, "filetree", "pic1.jpg"),
        os.path.join(TEST_DIR, "filetree", "pic4.JPEG"),
    ]

def test_jpeg_extension():
    clear()
    foundDups = find_duplicates(files_jpeg_extension)
    display_duplicates()
    return foundDups

out_jpeg_extension = """Duplicate image content:
0: %TESTDIR%/filetree/pic1.jpg
1: %TESTDIR%/filetree/pic4.JPEG"""


files_jpg_text = [
        os.path.join(TEST_DIR, "filetree", "notapic.jpg"),
    ]

def test_jpg_text():
    clear()
    foundDups = find_duplicates(files_jpg_text)
    display_failures()
    return not foundDups

out_jpg_text = ""

err_jpg_text = ""


files_twice = [
        os.path.join(TEST_DIR, "filetree", "basic.txt"),
        os.path.join(TEST_DIR, "filetree", "basic.txt"),
]

def test_twice():
    clear()
    foundDups = find_duplicates(files_twice)
    display_duplicates()
    return not foundDups

out_twice = ""


# This file contains valid headers but bad image data.
files_data_failure = [
        os.path.join(TEST_DIR, "filetree", "badpic2.jpg"),
    ]

def test_data_failure():
    clear()
    foundDups = find_duplicates(files_data_failure)
    display_failures()
    return not foundDups

out_data_failure = """Failures:
  %TESTDIR%/filetree/badpic2.jpg"""

err_data_failure = """ERROR: Failure to extract JPEG data (broken data stream when reading image file): %TESTDIR%/filetree/badpic2.jpg"""


files_bmp_dup = [
        os.path.join(TEST_DIR, "filetree", "pic1.bmp"),
        os.path.join(TEST_DIR, "filetree", "pic2.bmp"),
    ]

def test_bmp_dup():
    clear()
    foundDups = find_duplicates(files_bmp_dup)
    display_duplicates()
    return foundDups

out_bmp_dup = """Duplicate image content:
0: %TESTDIR%/filetree/pic1.bmp
1: %TESTDIR%/filetree/pic2.bmp"""


files_bmp_jpg = [
        os.path.join(TEST_DIR, "filetree", "pic1.bmp"),
        os.path.join(TEST_DIR, "filetree", "pic1.jpg"),
    ]

def test_bmp_jpg():
    clear()
    foundDups = find_duplicates(files_bmp_jpg)
    display_duplicates()
    return foundDups

out_bmp_jpg = """Duplicate image content:
0: %TESTDIR%/filetree/pic1.bmp
1: %TESTDIR%/filetree/pic1.jpg"""


files_tiff_dup = [
        os.path.join(TEST_DIR, "filetree", "pic1.tiff"),
        os.path.join(TEST_DIR, "filetree", "pic2.tiff"),
    ]

def test_tiff_dup():
    clear()
    foundDups = find_duplicates(files_tiff_dup)
    display_duplicates()
    return foundDups

out_tiff_dup = """Duplicate image content:
0: %TESTDIR%/filetree/pic1.tiff
1: %TESTDIR%/filetree/pic2.tiff"""


files_tiff_jpg = [
        os.path.join(TEST_DIR, "filetree", "pic1.tiff"),
        os.path.join(TEST_DIR, "filetree", "pic1.jpg"),
    ]

def test_tiff_jpg():
    clear()
    foundDups = find_duplicates(files_tiff_jpg)
    display_duplicates()
    return foundDups

out_tiff_jpg = """Duplicate image content:
0: %TESTDIR%/filetree/pic1.tiff
1: %TESTDIR%/filetree/pic1.jpg"""


